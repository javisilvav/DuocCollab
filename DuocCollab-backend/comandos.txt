Como proyecto necesitamos que un alumno-usuario pueda crear un perfil dentro de "Collab",
 en donde se relacione su escuela, sede, carrera y pueda realizar publicaciones de proyectos y pueda postular a un proyecto.
  También el alumno-usuario puede crear un proyecto y asociarlo a una etiqueta 
  y así también puede revisar los integrantes del proyecto creado.



REGLA DE APIS
- Usar token del lado .env para acceder a urls

TABLA USUARIOS
- API consulta todos los usuarios
- API consulta imagenes (Usadas para portada y perfil)
- API contempla HASH para comprobar login y crear cuenta
- API crear nuevo usuario 
**FALTA 
- Relacionar llaves foraneas

TABLA SEDE_ESCUELA
- API consulta todas las ID de sedes y escuelas 


TABLA SEDE
- API consulta todas las id de sedes

TABLA PROYECTO ETIQUETA
- API consulta etiquetas

TABLA PROYECTO
- API consulta los datos de proyecto sin relacionar llaves foraneas

TABLA POSTULACION
- API consulta todas las postulaciones sin relacionar llaves foraneas

TABLA INTEGRANTES_PROYECTO
- API consulta todos los datos sin relacionar llaves foraneas

TABLA ETIQUETA
- API consulta los datos de etiqueta sin relacionar llaves foraneas

TABLA ESCUELA
- API consulta los datos de escuela

TABLA CARRERA
- API consulta los datos de CARRERA sin relacionar llaves foraneas




#Proyecto COLLAB

>DuocCollab_app
-- urls.py
-- views.py
-- .env
-- api_client
-->> static
---->> css
---->> img
-------->> sin_perfil.png
-->> templates
---->> index.html
---->> login.html
---->> mispostulaciones.html
---->> misproyectos.html
---->> nav-footer.html
---->> perfil.html
---->> proyectos_detail.html
---->> proyectos.html
---->> reset_password.html
---->> signup.html
>proyectoDuocCollab
-- settings.py
-- urls.py
manage.py



#APIS
Apis #Carpeta principal
> bd
---- institucion.py
---- proyecto.py
---- usuario.py
> routes
----- auth.py
----- institucion_routes.py
----- proyecto_routes.py
----- usuarios_routes.py
> services
----- institucion_service.py
----- proyecto_service.py
----- usuario_service.py
.env
app.py
config.py
















cmd
..\venv\Scripts\activate


Python "API REST"/python main.py




-- Crear regla para api key en supabase

-- Permitir SELECT para 'anon'
create policy "Allow read for anon"
on "public"."SEDE"
for select
using (auth.role() = 'anon');

-- Permitir INSERT para 'anon'
create policy "Allow insert for anon"
on "public"."SEDE"
for insert
to anon
with check (auth.role() = 'anon');

-- Permitir UPDATE para 'anon'
create policy "Allow update for anon"
on "public"."SEDE"
for update
using (auth.role() = 'anon')
with check (auth.role() = 'anon');




-- Permitir SELECT para 'anon'
create policy "Allow read for anon"
on "public"."CARRERA"
for select
using (auth.role() = 'anon');

-- Permitir INSERT para 'anon'
create policy "Allow insert for anon"
on "public"."CARRERA"
for insert
to anon
with check (auth.role() = 'anon');

-- Permitir UPDATE para 'anon'
create policy "Allow update for anon"
on "public"."CARRERA"
for update
using (auth.role() = 'anon')
with check (auth.role() = 'anon');





-- Permitir SELECT para 'anon'
create policy "Allow read for anon"
on "public"."ETIQUETA"
for select
using (auth.role() = 'anon');

-- Permitir INSERT para 'anon'
create policy "Allow insert for anon"
on "public"."ETIQUETA"
for insert
to anon
with check (auth.role() = 'anon');

-- Permitir UPDATE para 'anon'
create policy "Allow update for anon"
on "public"."ETIQUETA"
for update
using (auth.role() = 'anon')
with check (auth.role() = 'anon');




-- Permitir SELECT para 'anon'
create policy "Allow read for anon"
on "public"."INTEGRANTES_PROYECTO"
for select
using (auth.role() = 'anon');

-- Permitir INSERT para 'anon'
create policy "Allow insert for anon"
on "public"."INTEGRANTES_PROYECTO"
for insert
to anon
with check (auth.role() = 'anon');

-- Permitir UPDATE para 'anon'
create policy "Allow update for anon"
on "public"."INTEGRANTES_PROYECTO"
for update
using (auth.role() = 'anon')
with check (auth.role() = 'anon');





-- Permitir SELECT para 'anon'
create policy "Allow read for anon"
on "public"."POSTULACION"
for select
using (auth.role() = 'anon');

-- Permitir INSERT para 'anon'
create policy "Allow insert for anon"
on "public"."POSTULACION"
for insert
to anon
with check (auth.role() = 'anon');

-- Permitir UPDATE para 'anon'
create policy "Allow update for anon"
on "public"."POSTULACION"
for update
using (auth.role() = 'anon')
with check (auth.role() = 'anon');






-- Permitir SELECT para 'anon'
create policy "Allow read for anon"
on "public"."PROYECTO"
for select
using (auth.role() = 'anon');

-- Permitir INSERT para 'anon'
create policy "Allow insert for anon"
on "public"."PROYECTO"
for insert
to anon
with check (auth.role() = 'anon');

-- Permitir UPDATE para 'anon'
create policy "Allow update for anon"
on "public"."PROYECTO"
for update
using (auth.role() = 'anon')
with check (auth.role() = 'anon');





-- Permitir SELECT para 'anon'
create policy "Allow read for anon"
on "public"."PROYECTO_ETIQUETA"
for select
using (auth.role() = 'anon');

-- Permitir INSERT para 'anon'
create policy "Allow insert for anon"
on "public"."PROYECTO_ETIQUETA"
for insert
to anon
with check (auth.role() = 'anon');

-- Permitir UPDATE para 'anon'
create policy "Allow update for anon"
on "public"."PROYECTO_ETIQUETA"
for update
using (auth.role() = 'anon')
with check (auth.role() = 'anon');






-- Permitir SELECT para 'anon'
create policy "Allow read for anon"
on "public"."SEDE_ESCUELA"
for select
using (auth.role() = 'anon');

-- Permitir INSERT para 'anon'
create policy "Allow insert for anon"
on "public"."SEDE_ESCUELA"
for insert
to anon
with check (auth.role() = 'anon');

-- Permitir UPDATE para 'anon'
create policy "Allow update for anon"
on "public"."SEDE_ESCUELA"
for update
using (auth.role() = 'anon')
with check (auth.role() = 'anon');





-- Permitir SELECT para 'anon'
create policy "Allow read for anon"
on "public"."USUARIO"
for select
using (auth.role() = 'anon');

-- Permitir INSERT para 'anon'
create policy "Allow insert for anon"
on "public"."USUARIO"
for insert
to anon
with check (auth.role() = 'anon');

-- Permitir UPDATE para 'anon'
create policy "Allow update for anon"
on "public"."USUARIO"
for update
using (auth.role() = 'anon')
with check (auth.role() = 'anon');




-- Permitir SELECT para 'anon'
create policy "Allow read for anon"
on "public"."ESCUELA"
for select
using (auth.role() = 'anon');

-- Permitir INSERT para 'anon'
create policy "Allow insert for anon"
on "public"."ESCUELA"
for insert
to anon
with check (auth.role() = 'anon');

-- Permitir UPDATE para 'anon'
create policy "Allow update for anon"
on "public"."ESCUELA"
for update
using (auth.role() = 'anon')
with check (auth.role() = 'anon');



import requests

API_URL = "http://192.168.101.8:5000/api/login"  # o el endpoint que uses
API_TOKEN = "TU_TOKEN_SECRETO"

headers = {
    "Authorization": f"Bearer {API_TOKEN}",
    "Content-Type": "application/json"
}

# Si envías datos por POST
data = {
    "correo": "usuario@example.com",
    "contrasenia": "miclave123"
}

response = requests.post(API_URL, json=data, headers=headers)

if response.ok:
    print("✅ Autenticado:", response.json())
else:
    print("❌ Error:", response.status_code, response.text)
